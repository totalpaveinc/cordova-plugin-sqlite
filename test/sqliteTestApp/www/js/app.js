/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@totalpave/cordova-plugin-sqlite/www/sqlite.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@totalpave/cordova-plugin-sqlite/www/sqlite.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n/*\n   Copyright 2022 Total Pave Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\nclass Database {\n    constructor(handle) {\n        this.$handle = handle;\n        this.$closed = false;\n    }\n    getHandle() {\n        return this.$handle;\n    }\n    isClosed() {\n        return this.$closed;\n    }\n    __close() {\n        this.$closed = true;\n    }\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n/*\n   Copyright 2022 Total Pave Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\nvar OpenFlags;\n(function (OpenFlags) {\n    OpenFlags[OpenFlags[\"READ_ONLY\"] = 1] = \"READ_ONLY\";\n    OpenFlags[OpenFlags[\"READ_WRITE\"] = 2] = \"READ_WRITE\";\n    OpenFlags[OpenFlags[\"CREATE\"] = 4] = \"CREATE\";\n    OpenFlags[OpenFlags[\"URI\"] = 64] = \"URI\";\n    OpenFlags[OpenFlags[\"MEMORY\"] = 128] = \"MEMORY\";\n    OpenFlags[OpenFlags[\"NO_MUTEX\"] = 32768] = \"NO_MUTEX\";\n    OpenFlags[OpenFlags[\"FULL_MUTEX\"] = 65536] = \"FULL_MUTEX\";\n    OpenFlags[OpenFlags[\"SHARED_CACHE\"] = 131072] = \"SHARED_CACHE\";\n    OpenFlags[OpenFlags[\"PRIVATE_CACHE\"] = 262144] = \"PRIVATE_CACHE\";\n    OpenFlags[OpenFlags[\"NO_FOLLOW\"] = 16777216] = \"NO_FOLLOW\";\n})(OpenFlags || (OpenFlags = {}));\nconst SERVICE_NAME = \"TPSQLite\";\nconst DEFAULT_BUSY_TIMEOUT = 60000; // 60 seconds\nclass SQLite {\n    static $exec(method, vargs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                cordova.exec((response) => {\n                    resolve(response);\n                }, (error) => {\n                    reject(error);\n                }, SERVICE_NAME, method, vargs);\n            });\n        });\n    }\n    static open(path, writeAccess, busyTimeout = DEFAULT_BUSY_TIMEOUT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (path.indexOf(\"file://\") !== 0) {\n                throw new Error(\"Database path must start with file://\");\n            }\n            let dbHandle = (yield this.$exec('open', [\n                path,\n                writeAccess ? OpenFlags.CREATE | OpenFlags.READ_WRITE : OpenFlags.READ_ONLY,\n                busyTimeout\n            ])).dbHandle;\n            return new Database(dbHandle);\n        });\n    }\n    static close(db) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.$exec('close', [{ dbHandle: db.getHandle() }]);\n            db.__close();\n        });\n    }\n    /**\n     *\n     * Note, this API is unsafe to use while the db is being actively used.\n     *\n     * @param path\n     * @param backupName\n     */\n    static backup(path, backupPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.$exec('backup', [path, backupPath]);\n        });\n    }\n    /**\n     *\n     * Note, this API is unsafe to use while the db is being actively used.\n     *\n     * @param path\n     * @param backupName\n     */\n    static restoreBackup(path, backupPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.$exec('restoreBackup', [path, backupPath]);\n        });\n    }\n}\n\nconst NativeFileReader = window.FileReader; // Hold a reference to FileReader before plugins like cordova-plugin-file overwrites it.\nclass SQLiteParamValueConverter {\n    static numberToInteger(value) {\n        return value;\n    }\n    static numberToDouble(value) {\n        return value;\n    }\n    static booleanToInteger(value) {\n        return value ? 1 : 0;\n    }\n    static nullOrUndefinedToSQLiteNull(value) {\n        return null;\n    }\n    static dateToText(value) {\n        return value.toISOString();\n    }\n    static stringToText(value) {\n        return value;\n    }\n    static blobToSQLiteBlob(value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {\n                type: 'bytearray',\n                value: SQLiteParamValueConverter.$normalizeBufferedArray(new Uint8Array(yield SQLiteParamValueConverter.$getArrayBufferFromBlob(value)))\n            };\n        });\n    }\n    static arrayBufferToSQLiteBlob(value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {\n                type: 'bytearray',\n                value: SQLiteParamValueConverter.$normalizeBufferedArray(new Uint8Array(value))\n            };\n        });\n    }\n    static int8OrUint8ToSQLiteBlob(value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {\n                type: 'bytearray',\n                value: SQLiteParamValueConverter.$normalizeBufferedArray(value)\n            };\n        });\n    }\n    static $normalizeBufferedArray(ta) {\n        let out = [];\n        for (let i = 0; i < ta.length; i++) {\n            out.push(ta[i]);\n        }\n        return out;\n    }\n    static $getArrayBufferFromBlob(value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let ab;\n            if (value.arrayBuffer) {\n                ab = yield value.arrayBuffer();\n            }\n            else {\n                // If the arrayBuffer method is not available, then\n                // we need to read it manually.\n                ab = yield new Promise((resolve, reject) => {\n                    let reader = new NativeFileReader();\n                    // event handlers needs to be manually detached\n                    // to avoid memory leaks\n                    // https://developer.mozilla.org/en-US/docs/Web/API/FileReader#events\n                    const onLoadEnd = () => {\n                        reader.removeEventListener('loadend', onLoadEnd);\n                        if (reader.error) {\n                            reject(reader.error);\n                            return;\n                        }\n                        resolve(reader.result);\n                    };\n                    reader.addEventListener('loadend', onLoadEnd);\n                    reader.readAsArrayBuffer(value);\n                });\n            }\n            return ab;\n        });\n    }\n}\n\n/**\n * @since v0.2.0\n */\nclass SQLiteParamAdapter {\n    constructor() { }\n    /**\n     * Attempt to adapt an arbitrary data type to a supported SQLite Type\n     *\n     * There is a set of default adaptions for common types including\n     * null, strings and numbers which are all passthrough types. There is also\n     * default adaptions for booleans, Dates and blobs, where booleans are\n     * convered to an integer of 1 or 0, Dates are converted to an ISO string,\n     * and blobs are adapted to a special JSON format to represent bytearrays.\n     *\n     * If required, any of the _adapt* methods could be overwritten to change\n     * the behaviour however it would be recommended to keep the defaults.\n     *\n     * If you are importing custom types, override the `_adapt` method to handle\n     * them.\n     *\n     * @param v\n     * @returns\n     */\n    $adapt(v) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let out;\n            if (v === null) {\n                out = this._adaptNull(v);\n            }\n            else if (typeof v === 'number') {\n                out = this._adaptNumber(v);\n            }\n            else if (typeof v === 'string') {\n                out = this._adaptString(v);\n            }\n            else if (typeof v === 'boolean') {\n                out = this._adaptBoolean(v);\n            }\n            else if (v instanceof Date) {\n                out = this._adaptDate(v);\n            }\n            else if (v instanceof Blob) {\n                out = yield this._adaptBlob(v);\n            }\n            else if (v instanceof ArrayBuffer) {\n                out = yield this._adaptArrayBuffer(v);\n            }\n            else if ((v instanceof Int8Array) || (v instanceof Uint8Array)) {\n                out = yield this._adaptInt8TypedArray(v);\n            }\n            else {\n                out = yield this._adapt(v);\n            }\n            return out;\n        });\n    }\n    _adaptInt8TypedArray(v) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield SQLiteParamValueConverter.int8OrUint8ToSQLiteBlob(v);\n        });\n    }\n    _adaptArrayBuffer(v) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield SQLiteParamValueConverter.arrayBufferToSQLiteBlob(v);\n        });\n    }\n    _adaptBlob(v) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield SQLiteParamValueConverter.blobToSQLiteBlob(v);\n        });\n    }\n    _adaptDate(v) {\n        if (v.toString() === 'Invalid Date') {\n            throw new Error('Invalid Date');\n        }\n        return SQLiteParamValueConverter.dateToText(v);\n    }\n    _adaptBoolean(v) {\n        return SQLiteParamValueConverter.booleanToInteger(v);\n    }\n    _adaptString(v) {\n        return v;\n    }\n    _adaptNumber(v) {\n        return v;\n    }\n    _adaptNull(v) {\n        return null;\n    }\n    _adapt(v) {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('Hit an unknown type. This is an unsupported operation. To support custom types, extend SQLiteParamAdapter and implement the _adapt method.');\n        });\n    }\n    processArray(input) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // any cause we need to match the array structure...\n            let out = [];\n            for (let i = 0; i < input.length; i++) {\n                let row = input[i];\n                let outRow = [];\n                for (let j = 0; j < row.length; j++) {\n                    let v = row[j];\n                    outRow.push(yield this.$adapt(v));\n                }\n                out.push(outRow);\n            }\n            return out;\n        });\n    }\n    processKWargs(input) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let out = {};\n            for (let i in input) {\n                let inValue = input[i];\n                if (inValue === undefined) {\n                    // skip undefined values, don't add it to the param object.\n                    continue;\n                }\n                let outValue;\n                if (inValue instanceof Array) {\n                    if (inValue.length === 0) {\n                        // skip empty arrays, don't add it to param object\n                        continue;\n                    }\n                    outValue = [];\n                    for (let j = 0; j < inValue.length; j++) {\n                        outValue.push(yield this.$adapt(inValue[j]));\n                    }\n                }\n                else {\n                    outValue = yield this.$adapt(input[i]);\n                }\n                out[i] = outValue;\n            }\n            return out;\n        });\n    }\n}\n\n/*\n   Copyright 2022 Total Pave Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n/**\n * Before v0.2.0 TParams can hold anything, as long as you filtered out\n * non-query parameters inside _getParameters.\n *\n * @since v0.2.0\n *\n * TParams must only contain query parameters. Additional query options can be passed\n * as an another argument if desired. Implementing _getParameters is now optional\n * and the default implementation of it will automatically convert several\n * well known types into the appropriate SQLite type.\n *\n * Custom type adaptions can be implemented by providing a custom SQLiteParamAdapter.\n *\n * If you can guarentee that the TParams consists of only valid SQLite Types, then\n * the overriding _getParameters can be used to skip the adaption step, which might be\n * a significant performance gain on large param queries, such as bulk inserts.\n *\n * @example\n * ```typescript\n * protected override _getParameters(params: TParams): SQLiteParams {\n *  return <SQLiteParams><unknown>params;\n * }\n * ```\n */\nclass Query {\n    constructor(params) {\n        this.$params = params;\n        this.$paramAdapter = this._createParamAdapter();\n    }\n    /**\n     * @since v0.2.0\n     * @returns\n     */\n    _createParamAdapter() {\n        return new SQLiteParamAdapter();\n    }\n    _validateParameterNames(params) {\n        for (let key in params) {\n            if (!(/^([a-zA-Z])+([a-zA-Z0-9_]+)/.test(key))) {\n                throw new Error(`Query parameter \"${key}\" contains an invalid character. Parameter name should only contain alphanumeric or underscore characters. The first charater must be an alphebetical letter.`);\n            }\n        }\n    }\n    /**\n     * Returns the parameters as given to the Query\n     * @returns\n     */\n    getParams() {\n        return this.$params;\n    }\n    /**\n     * Implement to translate unknown parameter types into valid SQL data types\n     * @param params\n     * @returns\n     */\n    _getParameters(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!params) {\n                return null;\n            }\n            let out;\n            if (params instanceof Array) {\n                out = yield this.$paramAdapter.processArray(params);\n            }\n            else if (typeof params === 'object') {\n                out = yield this.$paramAdapter.processKWargs(params);\n            }\n            return out;\n        });\n    }\n    /**\n     * @internal function that controls which native API to call. Don't touch this.\n     */\n    _getNativeMethod() {\n        return 'query';\n    }\n    execute(db) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let params = yield this._getParameters(this.$params);\n            this._validateParameterNames(params); // _getParameters is able to create or remove parameter keys. As a result, we must validate the returned value of _getParameters.\n            return new Promise((resolve, reject) => {\n                cordova.exec((data) => {\n                    resolve(data);\n                }, (error) => {\n                    reject(error);\n                }, SERVICE_NAME, this._getNativeMethod(), [\n                    { dbHandle: db.getHandle() },\n                    this.getQuery(),\n                    params\n                ]);\n            });\n        });\n    }\n}\n\nclass BulkInsertQuery extends Query {\n    $escapeColumn(column) {\n        let pieces = column.split('.');\n        if (pieces[0].charAt(0) != '`') {\n            pieces[0] = `\\`${pieces[0]}\\``;\n        }\n        if (pieces[1] && pieces[1].charAt(0) != '`') {\n            pieces[1] = `\\`${pieces[1]}\\``;\n        }\n        return pieces[0] + (pieces[1] ? `.${pieces[1]}` : '');\n    }\n    getQuery() {\n        let columns = this._getColumns().slice();\n        for (let i = 0; i < columns.length; ++i) {\n            columns[i] = this.$escapeColumn(columns[i]);\n        }\n        return `\n            INSERT INTO ${this._getTable()}\n            (\n                ${columns.join(\",\")}\n            )\n            :BulkInsertValue\n            ${this._getOnConflict()}\n        `;\n    }\n    _validateParameterNames() { }\n    _getNativeMethod() {\n        return 'bulkInsert';\n    }\n    _getParameters(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return params;\n        });\n    }\n    /**\n     * Override this to provide the ON CONFLICT (column) DO UPDATE clause.\n     * Value will not be sanitized.\n     *\n     * Return Value Example:\n     *\n     *     ON CONFLICT (id) DO UPDATE SET\n     *         sourceTarget = excluded.sourceTarget,\n     *         sourceVersion = excluded.sourceVersion\n     */\n    _getOnConflict() {\n        return \"\";\n    }\n}\n\nexports.TransactionMode = void 0;\n(function (TransactionMode) {\n    TransactionMode[TransactionMode[\"DEFERRED\"] = 0] = \"DEFERRED\";\n    TransactionMode[TransactionMode[\"IMMEDIATE\"] = 1] = \"IMMEDIATE\";\n    TransactionMode[TransactionMode[\"EXCLUSIVE\"] = 2] = \"EXCLUSIVE\";\n})(exports.TransactionMode || (exports.TransactionMode = {}));\n\n/**\n * @since v0.2.0\n */\nclass CreateIndexQuery extends Query {\n    constructor(options) {\n        super();\n        this.$options = options;\n    }\n    $sanitize(value) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        return `\\`${value}\\``;\n    }\n    getQuery() {\n        let options = this.$options;\n        return `\n            CREATE INDEX IF NOT EXISTS ${this.$sanitize(options.indexName)}\n            ON ${this.$sanitize(options.tableName)} (${this.$sanitize(options.columnName)})\n        `;\n    }\n}\n\n/*\n   Copyright 2022 Total Pave Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\nclass RawQuery extends Query {\n    constructor(sql, params) {\n        super(params);\n        this.$sql = sql;\n    }\n    _getParameters(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return params ? params : null;\n        });\n    }\n    getQuery() {\n        return this.$sql;\n    }\n}\n\n/*\n   Copyright 2022 Total Pave Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\nclass StartTransactionQuery extends Query {\n    /**\n     * @param mode See https://www.sqlite.org/lang_transaction.html\n     */\n    constructor(mode = exports.TransactionMode.DEFERRED) {\n        super();\n        this.$mode = mode;\n    }\n    getQuery() {\n        // Note, don't use string manipulation\n        // as malicious actors could override $mode in\n        // the JS runtime.\n        let sql;\n        switch (this.$mode) {\n            case exports.TransactionMode.DEFERRED:\n                sql = 'BEGIN DEFERRED TRANSACTION';\n                break;\n            case exports.TransactionMode.EXCLUSIVE:\n                sql = 'BEGIN EXCLUSIVE TRANSACTION';\n                break;\n            case exports.TransactionMode.IMMEDIATE:\n                sql = 'BEGIN IMMEDIATE TRANSACTION';\n                break;\n        }\n        if (!sql) {\n            throw new Error('Invalid TransactionMode');\n        }\n        return sql;\n    }\n}\n\n/*\n   Copyright 2022 Total Pave Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\nclass CommitTransactionQuery extends Query {\n    getQuery() {\n        return 'COMMIT TRANSACTION';\n    }\n}\n\n/*\n   Copyright 2022 Total Pave Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\nclass RollbackTransactionQuery extends Query {\n    getQuery() {\n        return 'ROLLBACK TRANSACTION';\n    }\n}\n\nexports.BulkInsertQuery = BulkInsertQuery;\nexports.CommitTransactionQuery = CommitTransactionQuery;\nexports.CreateIndexQuery = CreateIndexQuery;\nexports.Database = Database;\nexports.Query = Query;\nexports.RawQuery = RawQuery;\nexports.RollbackTransactionQuery = RollbackTransactionQuery;\nexports.SQLite = SQLite;\nexports.SQLiteParamAdapter = SQLiteParamAdapter;\nexports.SQLiteParamValueConverter = SQLiteParamValueConverter;\nexports.StartTransactionQuery = StartTransactionQuery;\n//# sourceMappingURL=sqlite.js.map\n\n\n//# sourceURL=webpack://io.cordova.hellocordova/./node_modules/@totalpave/cordova-plugin-sqlite/www/sqlite.js?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @totalpave/cordova-plugin-sqlite */ \"./node_modules/@totalpave/cordova-plugin-sqlite/www/sqlite.js\");\n/*\n   Copyright 2022 Total Pave Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\n// Wait for the deviceready event before using any of Cordova's device APIs.\n// See https://cordova.apache.org/docs/en/latest/cordova/events/events.html#deviceready\n\nclass InsertPersonQuery extends _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.Query {\n    getQuery() {\n        return `\n            INSERT INTO test VALUES (\n                :id,\n                :name,\n                :height,\n                :data\n            )\n        `;\n    }\n    _getParameters(params) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            return {\n                id: params.id,\n                name: params.name,\n                height: params.height,\n                data: params.data ? (yield _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.SQLiteParamValueConverter.blobToSQLiteBlob(params.data)) : null\n            };\n        });\n    }\n}\nclass BulkInsertPersonQuery extends _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.BulkInsertQuery {\n    _getTable() {\n        return \"test\";\n    }\n    _getColumns() {\n        return [\n            \"id\",\n            \"name\",\n            \"height\",\n            \"data\"\n        ];\n    }\n    _getOnConflict() {\n        return `\n            ON CONFLICT (id) DO UPDATE SET\n                name = excluded.name,\n                height = excluded.height,\n                data = excluded.data\n        `;\n    }\n}\nclass BulkInsertColumnEscapeQuery extends _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.BulkInsertQuery {\n    _getTable() {\n        return \"test\";\n    }\n    _getColumns() {\n        return [\n            \"id\",\n            \"`name`\",\n            \"test.height\",\n            \"`test`.`data`\"\n        ];\n    }\n    _getOnConflict() {\n        return `\n            ON CONFLICT (id) DO UPDATE SET\n                name = excluded.name,\n                height = excluded.height,\n                data = excluded.data\n        `;\n    }\n}\ndocument.addEventListener('deviceready', onDeviceReady, false);\nlet db;\nfunction prepareTestDB() {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n        db = yield _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.SQLite.open(cordova.file.dataDirectory + 'test.db', true);\n        yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery(`\n        CREATE TABLE IF NOT EXISTS test (\n            id INTEGER NOT NULL PRIMARY KEY,\n            name TEXT NOT NULL,\n            height REAL,\n            data BLOB\n        )\n    `).execute(db);\n        yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery(`DELETE FROM test`).execute(db);\n    });\n}\nfunction runTest(number, description, testFn) {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n        console.log(`Test ${number} - ${description}`);\n        try {\n            yield testFn();\n            console.log(`Test ${number} passes`);\n        }\n        catch (ex) {\n            console.error(`Test ${number} failed |`, ex.message);\n        }\n    });\n}\nfunction onDeviceReady() {\n    // Cordova is now initialized. Have fun!\n    var _a;\n    console.log('Running cordova-' + cordova.platformId + '@' + cordova.version);\n    (_a = document.getElementById('deviceready')) === null || _a === void 0 ? void 0 : _a.classList.add('ready');\n    (() => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n        yield prepareTestDB();\n        yield runTest(1, 'insert works', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            yield new InsertPersonQuery({\n                id: 1,\n                name: 'John Smith',\n                height: 3.14,\n                data: null\n            }).execute(db);\n        }));\n        yield runTest(2, 'insert with blob works', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            yield new InsertPersonQuery({\n                id: 3,\n                name: 'Tyler Breau',\n                height: 5.8,\n                data: new Blob([new Uint8Array([0x11])])\n            }).execute(db);\n        }));\n        yield runTest(3, 'transactions work', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.StartTransactionQuery().execute(db);\n            yield new InsertPersonQuery({\n                id: 4,\n                name: 'John Smith',\n                height: 3.14,\n                data: null\n            }).execute(db);\n            yield new InsertPersonQuery({\n                id: 5,\n                name: 'Norman Breau',\n                height: 5.7,\n                data: null\n            }).execute(db);\n            yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.CommitTransactionQuery().execute(db);\n        }));\n        yield runTest(4, 'select works', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            let data = (yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('SELECT * FROM test where id = 5').execute(db))[0];\n            if (data.id !== 5 ||\n                data.name !== 'Norman Breau' ||\n                data.height !== 5.7 ||\n                data.data !== null) {\n                throw new Error(`Data did not match expectations | ${JSON.stringify(data)} | ${JSON.stringify({ id: 5, name: 'Norman Breau', height: 5.7, data: null })}`);\n            }\n        }));\n        yield runTest(5, 'update works', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('UPDATE test SET name = \"bob\" WHERE id = 5').execute(db);\n            let data = (yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('SELECT name FROM test where id = 5').execute(db))[0];\n            if (data.name != \"bob\") {\n                throw new Error(`Update didn't update. ${JSON.stringify(data)}`);\n            }\n        }));\n        yield runTest(6, 'bulk insert works', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            yield new BulkInsertPersonQuery([\n                [6, \"Bob\", 1, null],\n                [7, \"Bob\", 1, null]\n            ]).execute(db);\n            let data = (yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('SELECT * FROM test where id = 6 OR id = 7').execute(db));\n            if (data[0].id !== 6 ||\n                data[0].name !== 'Bob' ||\n                data[0].height !== 1 ||\n                data[0].data !== null) {\n                throw new Error(`Data did not match expectations | ${JSON.stringify(data)} | ${JSON.stringify({ id: 6, name: 'Bob', height: 1, data: null })}`);\n            }\n            if (data[1].id !== 7 ||\n                data[1].name !== 'Bob' ||\n                data[1].height !== 1 ||\n                data[1].data !== null) {\n                throw new Error(`Data did not match expectations | ${JSON.stringify(data)} | ${JSON.stringify({ id: 7, name: 'Bob', height: 1, data: null })}`);\n            }\n        }));\n        yield runTest(7, 'bulk upsert works', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            yield new BulkInsertPersonQuery([\n                [8, \"Bob\", 1, null],\n                [9, \"Bob\", 1, null]\n            ]).execute(db);\n            yield new BulkInsertPersonQuery([\n                [8, \"Bob\", 2, null],\n                [9, \"Bob\", 2, null]\n            ]).execute(db);\n            let data = (yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('SELECT * FROM test where id = 8 OR id = 9').execute(db));\n            if (data[0].id !== 8 ||\n                data[0].name !== 'Bob' ||\n                data[0].height !== 2 ||\n                data[0].data !== null) {\n                throw new Error(`Data did not match expectations | ${JSON.stringify(data)} | ${JSON.stringify({ id: 8, name: 'Bob', height: 2, data: null })}`);\n            }\n            if (data[1].id !== 9 ||\n                data[1].name !== 'Bob' ||\n                data[1].height !== 2 ||\n                data[1].data !== null) {\n                throw new Error(`Data did not match expectations | ${JSON.stringify(data)} | ${JSON.stringify({ id: 9, name: 'Bob', height: 2, data: null })}`);\n            }\n        }));\n        yield runTest(8, 'arrays are supported', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('SELECT * FROM test WHERE id IN (:ids)', {\n                ids: [1, 2, 3]\n            }).execute(db);\n            // Expect to not error\n        }));\n        yield runTest(9, 'multiple arrays params are supported', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('SELECT * FROM test WHERE id IN (:ids) OR id IN (:ids)', {\n                ids: [1, 2, 3]\n            }).execute(db);\n            // Expect to not error\n        }));\n        yield runTest(10, 'query parameter names supports alphanumeric and _', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_: \"bob\"\n            });\n        }));\n        yield runTest(11, 'query parameter name\\'s first character does not support numeric or underscore.', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    _: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported first character _\");\n            }\n            catch (ex) { /* consume expected error */ }\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    0: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported first character 0\");\n            }\n            catch (ex) { /* consume expected error */ }\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    1: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported first character 1\");\n            }\n            catch (ex) { /* consume expected error */ }\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    2: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported first character 2\");\n            }\n            catch (ex) { /* consume expected error */ }\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    3: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported first character 3\");\n            }\n            catch (ex) { /* consume expected error */ }\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    4: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported first character 4\");\n            }\n            catch (ex) { /* consume expected error */ }\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    5: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported first character 5\");\n            }\n            catch (ex) { /* consume expected error */ }\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    6: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported first character 6\");\n            }\n            catch (ex) { /* consume expected error */ }\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    7: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported first character 7\");\n            }\n            catch (ex) { /* consume expected error */ }\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    8: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported first character 8\");\n            }\n            catch (ex) { /* consume expected error */ }\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    9: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported first character 9\");\n            }\n            catch (ex) { /* consume expected error */ }\n        }));\n        yield runTest(12, 'query parameter name does not support & as first character', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    $bob: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported first character &\");\n            }\n            catch (ex) { /* consume expected error */ }\n        }));\n        yield runTest(13, 'query parameter name does not support &', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    b$ob: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported character & in b$ob\");\n            }\n            catch (ex) { /* consume expected error */ }\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    bob$: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported character & in bob$\");\n            }\n            catch (ex) { /* consume expected error */ }\n            try {\n                yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('', {\n                    bob_$: \"bob\"\n                });\n                throw new Error(\"Query Parameter Name supported character & in bob_$\");\n            }\n            catch (ex) { /* consume expected error */ }\n        }));\n        yield runTest(14, 'BulkInsertQuery escapes columns correctly', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            let query = new BulkInsertColumnEscapeQuery({});\n            let queryStr = query.getQuery();\n            let expectation = \"`id`,`name`,`test`.`height`,`test`.`data`\";\n            if (queryStr.indexOf(expectation) === -1) {\n                throw new Error(`BulkInsertQuery did not properly escape column names. Expected \"${queryStr}\" to contain \"${expectation}\"`);\n            }\n        }));\n        let results = yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('SELECT * FROM test').execute(db);\n        for (let i = 0; i < results.length; i++) {\n            console.log('RESULT', i, results[i]);\n        }\n        yield runTest(15, 'backup db works', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            let path = cordova.file.dataDirectory + 'test.db';\n            let backupPath = cordova.file.dataDirectory + 'test-backup.db';\n            yield _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.SQLite.backup(path, backupPath);\n            let backupdb = yield _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.SQLite.open(backupPath, true);\n            let dbdata = yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('SELECT * FROM test ORDER BY id ASC').execute(db);\n            let backupdata = yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('SELECT * FROM test ORDER BY id ASC').execute(backupdb);\n            yield _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.SQLite.close(backupdb);\n            if (JSON.stringify(dbdata) !== JSON.stringify(backupdata)) {\n                throw new Error(\"Expected backup database to have identical data as source database.\");\n            }\n        }));\n        yield runTest(16, 'restore backup works', () => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\n            let path = cordova.file.dataDirectory + 'test.db';\n            let backupPath = cordova.file.dataDirectory + 'test-backup.db';\n            yield _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.SQLite.backup(path, backupPath);\n            // Oops, we destroyed the database\n            yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('DELETE FROM test').execute(db);\n            let dbdata = yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('SELECT * FROM test ORDER BY id ASC').execute(db);\n            if (dbdata.length !== 0) {\n                throw new Error(\"Expected test table to be empty.\");\n            }\n            yield _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.SQLite.close(db);\n            yield _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.SQLite.restoreBackup(path, backupPath);\n            db = yield _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.SQLite.open(cordova.file.dataDirectory + 'test.db', true);\n            dbdata = yield new _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.RawQuery('SELECT * FROM test ORDER BY id ASC').execute(db);\n            if (dbdata.length === 0) {\n                throw new Error(\"Expected test table to be restored.\");\n            }\n        }));\n        yield _totalpave_cordova_plugin_sqlite__WEBPACK_IMPORTED_MODULE_0__.SQLite.close(db);\n    }))().then(() => {\n        console.log('done');\n    }).catch((error) => {\n        console.error('Test failed with error', error);\n    });\n}\n\n\n//# sourceURL=webpack://io.cordova.hellocordova/./src/index.ts?");

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.mjs":
/*!******************************************!*\
  !*** ./node_modules/tslib/tslib.es6.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __addDisposableResource: () => (/* binding */ __addDisposableResource),\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __disposeResources: () => (/* binding */ __disposeResources),\n/* harmony export */   __esDecorate: () => (/* binding */ __esDecorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __propKey: () => (/* binding */ __propKey),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __runInitializers: () => (/* binding */ __runInitializers),\n/* harmony export */   __setFunctionName: () => (/* binding */ __setFunctionName),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nfunction __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nfunction __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nfunction __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nfunction __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nfunction __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nfunction __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nfunction __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nfunction __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nfunction __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nfunction __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nfunction __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nfunction __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nfunction __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nfunction __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nfunction __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n});\n\n\n//# sourceURL=webpack://io.cordova.hellocordova/./node_modules/tslib/tslib.es6.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;